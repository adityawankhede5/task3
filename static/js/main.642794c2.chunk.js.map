{"version":3,"sources":["components/Rectangle.js","components/Labels.js","App.js","reportWebVitals.js","index.js"],"names":["Rectangle","addPlane","className","onClick","AllLables","lables","mesh","updateMeshName","map","lable","Lables","position","closeOptions","useState","filteredLables","setFilteredLables","lableInput","setLableInput","style","top","left","type","placeholder","value","onChange","e","target","filter","startsWith","App","font","scene","setScene","lableOptionsPositon","setLableOptionsPositon","selectedMesh","setSelectedMesh","showMeshName","material","diffuseTexture","drawText","name","setTimeout","antialias","onSceneReady","clearColor","Color3","FromHexString","ArcRotateCamera","Math","PI","Vector3","Zero","getEngine","getRenderingCanvas","HemisphericLight","plane","MeshBuilder","CreatePlane","size","pointerDragBehavior","PointerDragBehavior","dragPlaneNormal","addBehavior","planeTexture","DynamicTexture","width","height","planeMaterial","StandardMaterial","actionManager","ActionManager","registerAction","ExecuteCodeAction","OnPickTrigger","ev","meshUnderPointer","OnDoublePickTrigger","pointerY","pointerX","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.642794c2.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Rectangle({addPlane}) {\n    \n\n    return (\n        <div className=\"rectangle\" onClick={addPlane} >\n        </div>\n    )\n}\n","import React, { useState } from 'react'\n\nconst AllLables = ({lables, mesh, updateMeshName}) => {\n    return lables.map(lable => {\n        return (\n            <div key={lable} className=\"lableContainer\" onClick={() => {updateMeshName(mesh, lable)}}>\n                {lable}\n            </div>\n        )\n    })\n}\nexport default function Lables({position, mesh, updateMeshName, closeOptions}) {\n    const lables = [\"back door\", \"backyard\", \"basement\", \"bathroom\", \"bedroom\", \"ceiling\", \"chimney\", \"column\", \"dining room\", \"doghouse\", \"door\", \"fence\", \"fenced yard\", \"fireplace\", \"furniture\" ];\n    const [filteredLables, setFilteredLables] = useState(lables);\n    const [lableInput, setLableInput] = useState(\"\");\n    const handleChange = (e) => {\n        setLableInput(e.target.value);\n        setFilteredLables(lables.filter(lable => {return lable.startsWith(e.target.value)}))\n    }\n    return (\n        <div className=\"lablesContainer\" style={{top: position.top, left: position.left}}>\n            <input type=\"text\" placeholder=\"Search\" value={lableInput} onChange={handleChange} />\n            <div className=\"allLablesContainer\">\n                <AllLables lables={filteredLables} mesh={mesh} updateMeshName={updateMeshName} />\n            </div>\n            <div className=\"cancelButton\" onClick={closeOptions} >\n                Cancel\n            </div>\n        </div>\n    )\n}\n","import './App.css';\nimport SceneComponent from 'babylonjs-hook';\nimport { Vector3, HemisphericLight, MeshBuilder, StandardMaterial, ArcRotateCamera,Color3, PointerDragBehavior, DynamicTexture, ActionManager, ExecuteCodeAction } from \"@babylonjs/core\";\nimport { useState } from 'react';\nimport Rectangle from './components/Rectangle';\nimport Lables from './components/Labels';\n\nfunction App() {\n  \n  const font = \"40px arial\";\n  \n  const [scene, setScene] = useState(null);\n  const [lableOptionsPositon, setLableOptionsPositon] = useState({top: 0, left: 0});\n  const [selectedMesh, setSelectedMesh] = useState(null);\n  \n  const onSceneReady = (scene) => {      \n    setScene(scene);\n    scene.clearColor = Color3.FromHexString(\"#e5e5e5\");\n    new ArcRotateCamera(\"cam\", -Math.PI / 2, Math.PI / 2, 3, new Vector3.Zero(), scene);\n    scene.getEngine().getRenderingCanvas();\n    new HemisphericLight(\"light\", new Vector3(2,-1,-1), scene);\n  }\n\n  const showMeshName = (mesh) => {\n    mesh.material.diffuseTexture.drawText(mesh.name, null, null, font, \"black\", \"white\", true, true);\n    setTimeout(() => {\n      mesh.material.diffuseTexture.drawText(mesh.name, null, null, font, \"white\", \"white\", true, true);\n    },2000)\n  }\n\n  const updateMeshName = (mesh, name) => {\n    mesh.name = name;\n    setSelectedMesh(null);\n    showMeshName(mesh);\n  }\n\n  const closeOptions = () => {\n    setSelectedMesh(null);\n  }\n  \n  const addPlane = () => {\n    // CREATE PLANE\n    const plane = MeshBuilder.CreatePlane(\"Plane\", {size: 1}, scene);\n    \n    // ADD ABITLITY TO DRAG.\n    const pointerDragBehavior = new PointerDragBehavior({dragPlaneNormal: new Vector3(0,0,1)});\n    plane.addBehavior(pointerDragBehavior);\n  \t\n    // ADD DEFAULT TEXT\n    const planeTexture = new DynamicTexture(\"plane texture\", {width:512, height:256}, scene);   \n\t  const planeMaterial = new StandardMaterial(\"plane\", scene);    \t\t\t\t\n  \tplaneMaterial.diffuseTexture = planeTexture;\n\t  plane.material = planeMaterial;\n    planeTexture.drawText(\"Plane\", null, null, font, \"white\", \"white\", true, true);\n    \n    // ADD ACTION MANAGER TO HANDLE EVENTS\n    plane.actionManager = new ActionManager(scene);\n\n    // ADD EVENT LISTENERS\n    // CLICK EVENT TO SHOW THE NAME OF THE PLANE.\n    plane.actionManager.registerAction(new ExecuteCodeAction(\n      ActionManager.OnPickTrigger,\n      (ev) => {\n        const mesh = ev.meshUnderPointer;\n        showMeshName(mesh);\n      }\n    ))\n\n    // DOUBLE CLICK TO SHOW THE RENAME OPTIONS.\n    plane.actionManager.registerAction(new ExecuteCodeAction(\n      ActionManager.OnDoublePickTrigger,\n      (ev) => {\n        setLableOptionsPositon({top: ev.pointerY, left: ev.pointerX});\n        setSelectedMesh(ev.meshUnderPointer);\n      }\n    ))\n  }\n\n\n  return (\n    <div className=\"main\">\n      {selectedMesh ? <Lables position={lableOptionsPositon} mesh={selectedMesh} updateMeshName={updateMeshName} closeOptions={closeOptions} /> : <></>}\n      <div className=\"titleBar\">\n        Snaptrude\n      </div>\n      <div className=\"sceneContainer\">\n        <SceneComponent className=\"sceneComponent\" antialias onSceneReady={onSceneReady} />\n        \n        <div className=\"sidecontrolContainer\">\n          <Rectangle addPlane={addPlane} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}